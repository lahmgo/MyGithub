


1、它的扩展性并不好。
2、业务逻辑应该在代码中

一旦我们开始实现复杂的布局，将会使我们的Data Binding解决方案越来越复杂。
首先我们将会面临下面的问题：
1、Layout 要求你给他们分别传递数据。
2、你也可能想为你的布局创建不同的数据源。
3、同样的问题也会在ViewStubs中发生。
虽然我们可以使用 android:onClick="@{() -> presenter.login(phone,pwd)}" 这种方式为 View 设置点击监听, 但是有时我们仍然不得不在 Java 代码中编写 binding.textView.setOnClickListenter() 这种老掉牙的注册监听方式, 最典型的就是在使用 < include > 标签加载布局时, 为布局中的某个 view 设置监听

为什么你会使用Data Binding
1、我可以开发的更快
长远来看，快速并不一定总是好的。当我们开发app的时候，我们是在跑一场马拉松而不是一次百米冲刺……不是吗

